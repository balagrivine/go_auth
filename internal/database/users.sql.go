// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createResetPasswordToken = `-- name: CreateResetPasswordToken :exec
UPDATE users
SET reset_password_token=$2, reset_password_token_sent_at = $3
WHERE email = $1
`

type CreateResetPasswordTokenParams struct {
	Email                    string
	ResetPasswordToken       sql.NullString
	ResetPasswordTokenSentAt sql.NullTime
}

func (q *Queries) CreateResetPasswordToken(ctx context.Context, arg CreateResetPasswordTokenParams) error {
	_, err := q.db.ExecContext(ctx, createResetPasswordToken, arg.Email, arg.ResetPasswordToken, arg.ResetPasswordTokenSentAt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users 
(id, username, email, password, first_name, last_name, created_at, updated_at, verified, reset_password_token, reset_password_token_sent_at)
VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, username, email, password, first_name, last_name, created_at, updated_at, verified, reset_password_token, reset_password_token_sent_at
`

type CreateUserParams struct {
	ID                       int32
	Username                 string
	Email                    string
	Password                 string
	FirstName                string
	LastName                 string
	CreatedAt                sql.NullTime
	UpdatedAt                sql.NullTime
	Verified                 sql.NullBool
	ResetPasswordToken       sql.NullString
	ResetPasswordTokenSentAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Verified,
		arg.ResetPasswordToken,
		arg.ResetPasswordTokenSentAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
		&i.ResetPasswordToken,
		&i.ResetPasswordTokenSentAt,
	)
	return i, err
}

const getResetPasswordToken = `-- name: GetResetPasswordToken :one
SELECT reset_password_token, reset_password_token_sent_at
FROM users
WHERE email = $1
`

type GetResetPasswordTokenRow struct {
	ResetPasswordToken       sql.NullString
	ResetPasswordTokenSentAt sql.NullTime
}

func (q *Queries) GetResetPasswordToken(ctx context.Context, email string) (GetResetPasswordTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getResetPasswordToken, email)
	var i GetResetPasswordTokenRow
	err := row.Scan(&i.ResetPasswordToken, &i.ResetPasswordTokenSentAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, first_name, last_name, created_at, updated_at, verified, reset_password_token, reset_password_token_sent_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
		&i.ResetPasswordToken,
		&i.ResetPasswordTokenSentAt,
	)
	return i, err
}

const resetPassword = `-- name: ResetPassword :exec
UPDATE users
SET password = $2, reset_password_token = ''
WHERE reset_password_token = $1
`

type ResetPasswordParams struct {
	ResetPasswordToken sql.NullString
	Password           string
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) error {
	_, err := q.db.ExecContext(ctx, resetPassword, arg.ResetPasswordToken, arg.Password)
	return err
}
